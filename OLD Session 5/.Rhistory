me + mean
x <- c(-1000, 15000, 60000, 30000, 100000, 40000, 15000, 35000, 20000, 36000)
sd(x)
qt(.975,9) # 9 is a degree of freedom 10-1=9, for 90% we write .95 and for 95% we write .975
#help(qt)
me <- qt(.95,9)*sd(x)/sqrt(10)
me - avg(x)
me + avg(x)
x <- c(-1000, 15000, 60000, 30000, 100000, 40000, 15000, 35000, 20000, 36000)
sd(x)
qt(.975,9) # 9 is a degree of freedom 10-1=9, for 90% we write .95 and for 95% we write .975
#help(qt)
me <- qt(.95,9)*sd(x)/sqrt(10)
me - mean(x)
me + mean(x)
x <- c(1000, 15000, 60000, 30000, 100000, 40000, 15000, 35000, 20000, 36000)
sd(x)
qt(.975,9) # 9 is a degree of freedom 10-1=9, for 90% we write .95 and for 95% we write .975
#help(qt)
me <- qt(.95,9)*sd(x)/sqrt(10)
me - mean(x)
me + mean(x)
x <- c(1000, 15000, 60000, 30000, 100000, 40000, 15000, 35000, 20000, 36000)
sd(x)
qt(.975,9) # 9 is a degree of freedom 10-1=9, for 90% we write .95 and for 95% we write .975
#help(qt)
me <- qt(.95,9)*sd(x)/sqrt(10)
me - mean(x)
me + mean(x)
x <- c(1000, 15000, 60000, 30000, 100000, 40000, 15000, 35000, 20000, 36000)
sd(x)
qt(.975,9) # 9 is a degree of freedom 10-1=9, for 90% we write .95 and for 95% we write .975
#help(qt)
me <- qt(.95,9)*sd(x)/sqrt(10)
mean(x) - me
mean(x) + me
help(aov)
datafilename="http://personality-project.org/R/datasets/R.appendix1.data"
data.ex1=read.table(datafilename,header=T)   #read the data into a table
data.ex1
aov.ex1 = aov(Alertness~Dosage,data=data.ex1)  #do the analysis of variance
summary(aovres)
datafilename="http://personality-project.org/R/datasets/R.appendix1.data"
mydata=read.table(datafilename,header=T)   #read the data into a table
mydata
aovres = aov(Alertness~Dosage,data=mydata)  #do the analysis of variance
summary(aovres)
boxplot(Alertness~Dosage,data=mydata) #graphical summary
datafilename = "http://personality-project.org/r/datasets/R.appendix2.data"
mydata2 = read.table(datafilename,header=T)   #read the data into a table
mydata2
aovres = aov(Alertness~Gender*Dosage, data=mydata2)
summary(mydata2)
datafilename = "http://personality-project.org/r/datasets/R.appendix2.data"
mydata2 = read.table(datafilename,header=T)   #read the data into a table
mydata2
aovres = aov(Alertness~Gender*Dosage, data=mydata2)
summary(aovres)
x <- rnorm(50)
x
y <- runif(30)
y
ks.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
x
y <- runif(50) #  generates a vector of uniformly distributed random numbers
y
ks.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(50) #  generates a vector of uniformly distributed random numbers
#y
ks.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- runif(50) #  generates a vector of uniformly distributed random numbers
#y
ks.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- runif(20) #  generates a vector of uniformly distributed random numbers
#y
ks.test(x,y)
kruskal.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- runif(50) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(50) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(50) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(50) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(50) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(500) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(500) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(5000) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(5000) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(5) #  generates a vector of normally distributed random numbers
#x
y <- rnorm(5) #  generates a vector of uniformly distributed random numbers
#y
kruskal.test(x,y)
x <- rnorm(5) #  generates a vector of normally distributed random numbers
y <- runif(5) #  generates a vector of uniformly distributed random numbers
kruskal.test(x,y)
x$data
x
kruskal.test(x ~ y,y)
kruskal.test(x ~ y,data=y)
kruskal.test(xnum ~ ynum,data=y)
kruskal.test(xnum ~ ynum,data=cbind(y,x))
kruskal.test(data=cbind(y,x))
kruskal.test(x ~ y,data=cbind(y,x))
x <- rnorm(50) #  generates a vector of normally distributed random numbers
y <- runif(50) #  generates a vector of uniformly distributed random numbers
kruskal.test(x ~ y,data=cbind(y,x))
help(kruskal.test())
help(kruskal.test)
list(x, y, z)
x <- c(2.9, 3.0, 2.5, 2.6, 3.2) # normal subjects
y <- c(3.8, 2.7, 4.0, 2.4)      # with obstructive airway disease
z <- c(2.8, 3.4, 3.7, 2.2, 2.0) # with asbestosis
list(x, y, z)
kruskal.test(list(x, y, z))
wilcox.test(list(x,y,z))
wilcox.test(list(x,y))
wilcox.test(x,y)
a <- c(2,4,5,6,7,8,9,12,14,15,9,6,3,1)
b <- c(2,5,6,7,9,12,13,15,16,15,13,12,10,5,2)
cor(a, b, method = c("pearson", "kendall", "spearman"))
a <- c(2,4,5,6,7,8,9,12,14,15,13,9,6,3,1)
b <- c(2,5,6,7,9,12,13,15,16,15,13,12,10,5,2)
cor(a, b, method = c("pearson", "kendall", "spearman"))
a <- c(2,4,5,6,7,8,9,12,14,15,13,9,6,3,1)
b <- c(2,5,6,7,9,12,13,15,16,15,13,12,10,5,2)
cor(a, b, method = "pearson")
a <- c(2,4,5,6,7,8,9,12,14,15,13,9,6,3,1)
b <- c(2,5,6,7,9,12,13,15,16,15,13,12,10,5,2)
cor(a, b, method = "pearson")
cor(a, b, method = "kendall")
cor(a, b, method = "spearman")
library(dbi)
library("DBI")
install.packages("DBI")
library("DBI")
con <- dbConnect(RMariaDB::MariaDB(), group = "met622")
install.packages("DBI")
install.packages("RMariaDB")
install.packages("DBI")
con <- dbConnect(RMariaDB::MariaDB(), group = "met622")
library("DBI")
library("RMariaDB")
library("DBI")
con <- dbConnect(RMariaDB::MariaDB(), group = "met622")
con <- dbConnect(MariaDB(), group = "met622")
con <- dbConnect(MariaDB(), dbname = "met622")
con <- dbConnect(RMariaDB::MariaDB(), dbname = "met622")
con <- dbConnect(RMariaDB::MariaDB(), dbname = "met622")
library("DBI")
con <- dbConnect(RMariaDB::MariaDB(), dbname = "met622")
con <- dbConnect(DBI::MariaDB(), dbname = "met622")
con <- dbConnect(MariaDB(), dbname = "met622")
install.packages("RMySQL")
library("RMySQL")
db_sql=dbConnect(MySQL(),user="root",
host="127.0.0.1",
dbname="met622",
password="root",
port=3306)
q <- "SELECT * FROM pet"
q
rows <- dbGetQuery(db_sql, "SELECT * FROM pet")
rows
install.packages("mongolite")
m <- mongo("test", url = "mongodb://localhost:27017/test")
library(mongolite)
m <- mongo("test", url = "mongodb://localhost:27017/test")
m
m$info()
m$find(query= "{*}")
m$find(query= "{}")
m$find(query= "{all}")
m$find(query= "{inventory}")
m <- mongo("test", url = "mongodb://localhost:27017/test/inventory")
m <- mongo("test", url = "mongodb://localhost:27017/test/inventory")
m <- mongo("test", url = "mongodb://localhost:27017/test")
m$find(query= "{inventory}")
m
m$find("{}")
m$find('{}')
alldata <- m$find('{}')
alldata
m <- mongo("test", url = "mongodb://localhost:27017/test?inventory")
m <- mongo("test", url = "mongodb://localhost:27017/test")
m <- mongo("test", url = "mongodb://localhost:27017/test.inventory")
inventory_col = mongo(collection = "inventory", db = "test")
inventory_col = mongo(collection = "inventory", db = "test")
m <- mongo("test", url = "mongodb://localhost:27017/test")
inventory_col = mongo(collection = "inventory", db = "test")
inventory_col$find('{}')
install.packages('tokenizer')
install.packages('tokenizers')
lib('tokenizers')
use('tokenizers')
library('tokenizers')
rawtxt <- "Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. You shouldn't eat cardboard"
VCorpus(VectorSource(rawtxt))
inspect(rawtxt)
library('tokenizers')
rawtxt <- "Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. You shouldn't eat cardboard"
inspect(rawtxt)
tktxt <- tokenize_sentences(rawtxt, lowercase = FALSE, strip_punct = FALSE, simplify = FALSE)
tktxt
tktxt <- tokenize_sentences(rawtxt, lowercase = FALSE, strip_punct = TRUE, simplify = FALSE)
tktxt
rawtxt <- "Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. You shouldn't eat cardboard"
tktxt <- tokenize_sentences(rawtxt, lowercase = FALSE, strip_punct = FALSE, simplify = FALSE)
tktxt
tktxt2 <- tokenize_line(rawtxt, lowercase = FALSE, strip_punct = FALSE, simplify = FALSE)
tktxt2
tktxt2 <- tokenize_lines(rawtxt, lowercase = FALSE, strip_punct = FALSE, simplify = FALSE)
tktxt2
tktxt2 <- tokenize_lines(rawtxt, simplify = FALSE)
tktxt2
tktxt3 <- tokenize_regex(rawtxt, pattern = "\\s+", simplify = FALSE)
txtxt3
tktxt3
summary(tktxt)
desc(tktxt)
class(tktxt)
install.packages('tm')
library('tm')
nostoptxt <- tm_map(tktxt, removeWords, stopwords("english"))
nostoptxt <- tm_map(rawtxt, removeWords, stopwords("english"))
VCorpus(VectorSource(rawtxt))
nostoptxt <- tm_map(a, removeWords, stopwords("english"))
a <- VCorpus(rawtxt)
a <- VCorpus(VectorSource(rawtxt))
class(a)
a
nostoptxt <- tm_map(rawtxt, removeWords, stopwords("english"))
nostoptxt <- tm_map(char(rawtxt), removeWords, stopwords("english"))
nostoptxt <- tm_map(rawtxt, removeWords, stopwords("english"))
nostoptxt <- tm_map(rawtxt,  stopwords("english"))
docs<- readLines(rawtxt, encoding = "UTF-8")
docs<- read.delim(rawtxt, encoding = "UTF-8")
corp1 <- Corpus(VectorSource(rawtxt))
class(corp1)
corp1
corp1
nostoptxt <- tm_map(corp1, removeWords, stopwords("english"))
nostoptxt
inspect(nostoptxt)
inspect((corp1)
nostoptxt <- tm_map(corp1, removeWords, stopwords("english"))
inspect(nostoptxt)
corp1 <- Corpus(VectorSource(rawtxt))
inspect((corp1)
inspect((corp1)
library('tm')
corp1 <- Corpus(VectorSource(rawtxt))
inspect(corp1)
tm_map(nostoptxt, stemDocument)
stemmed <- tm_map(nostoptxt, stemDocument)
inspect(stemmed)
corp1 <- Corpus(VectorSource(rawtxt))
inspect(corp1)
# remove stop words
nostoptxt <- tm_map(corp1, removeWords, stopwords("english"))
inspect(nostoptxt)
# Stemming
stemmed <- tm_map(nostoptxt, stemDocument)
inspect(stemmed)
rawtxt <- "Hello Mr. Smith, how are you doing today? The weather is great, and city is awesome. The sky is pinkish-blue. Seeing the sky is amazing. You shouldn't eat cardboard"
library('tm')
corp1 <- Corpus(VectorSource(rawtxt))
inspect(corp1)
# remove stop words
nostoptxt <- tm_map(corp1, removeWords, stopwords("english"))
inspect(nostoptxt)
# Stemming
stemmed <- tm_map(nostoptxt, stemDocument)
inspect(stemmed)
corp1 <- Corpus(VectorSource("banana is a fruit, it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber", "there are  pink and blue bananas as well as yellow"))
inspect(corp1)
corp2 <- Corpus(VectorSource("banana is a fruit, it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber", "there are  pink and blue bananas as well as yellow"))
inspect(corp2)
corp2 <- Corpus(VectorSource("banana is a fruit, it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber", "there are  pink and blue bananas as well as yellow"))
inspect(corp2)
corp2 <- Corpus(VectorSource("banana is a fruit, it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber", "there are  pink and blue bananas as well as yellow"))
#--- first lets create a document term matrix
dtmatrix <- DocumentTermMatrix(corp2)
inspect(dtmatrix)
dtmatrix <- DocumentTermMatrix(corp2)
corp2 <- Corpus(VectorSource("banana is a fruit, it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber", "there are  pink and blue bananas as well as yellow"))
#---
dtmatrix <- DocumentTermMatrix(corp2)
txt <- c("banana is a fruit, which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber",
"there are  pink and blue bananas as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
dtmatrix <- DocumentTermMatrix(corp2)
inspect(dtmatrix)
# TF IDF
txt <- c("banana is a fruit", "it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber",
"there are  pink and blue bananas as well as yellow")
# TF IDF
txt <- c("banana is a fruit", "it is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber",
"there are  pink and blue bananas as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
dtmatrix <- DocumentTermMatrix(corp2)
inspect(dtmatrix)
txt <- c("banana is a fruit, which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
dtmatrix <- DocumentTermMatrix(corp2)
inspect(dtmatrix)
txt <- c("banana is a fruit, which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber... ha ha ha yellow",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
dtmatrix <- DocumentTermMatrix(corp2)
inspect(dtmatrix)
dtmatrix <- DocumentTermMatrix(txt, control = list(weighting = weightTfIdf))
inspect(dtmatrix)
dtmatrix <- DocumentTermMatrix(txt, control = list(weighting = weightTfIdf))
inspect(dtmatrix)
dtmatrix <- DocumentTermMatrix(txt, control = list(weighting = weightTfIdf))
dtmatrix <- DocumentTermMatrix(dtmatrix, control = list(weighting = weightTfIdf))
tf <- as.matrix(dtmatrix)
inspect(tf)
summary(tf)
idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# calcualte tf
tf <- as.matrix(dtmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
dtm2 < - tf*idf
dtm2 <- tf*idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
txt <- c("banana is a fruit which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber... ha ha ha yellow",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
tdmatrix <- DocumentTermMatrix(corp2)
inspect(tdmatrix)
# calcualte tf
tf <- as.matrix(dtmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
txt <- c("banana is a fruit which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber... ha ha ha yellow",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
tdmatrix <- DocumentTermMatrix(corp2)
inspect(tdmatrix)
# calcualte tf
tf <- as.matrix(dtmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
txt <- c("banana is a fruit which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber... ha ha ha yellow",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
tdmatrix <- DocumentTermMatrix(corp2)
inspect(tdmatrix)
# calcualte tf
tf <- as.matrix(dtmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
txt <- c("banana is a fruit which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber... ha ha ha yellow",
"there are  pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
tdmatrix <- DocumentTermMatrix(corp2)
inspect(tdmatrix)
tf <- as.matrix(tdmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
# TF IDF
txt <- c("banana is a fruit which is yellow", "banana is the most tastiest fruit in the world",
"banana tastes good", "banana looks like a yellow cucumber ... ha ha ha yellow",
"there are pink banana and blue banana as well as yellow")
corp2 <- Corpus(VectorSource(txt))
#--- first lets create a document term matrix
tdmatrix <- DocumentTermMatrix(corp2)
inspect(tdmatrix)
# calcualte tf
tf <- as.matrix(tdmatrix)
# calcualte idf
idf <- log( ncol(tf) / ( 1 + rowSums(tf != 0) ) )
idf
# transform idf into a diagonal matrix to be able to multiply it by TF
idf <- diag(idf)
idf
tf_idf <- crossprod(tf, idf)
colnames(tf_idf) <- rownames(tf)
tf_idf
setwd("/Users/rawassizadeh/EVERYTHING/Work/TEACHING/CS 688 - Web Analytics and Mining/Module 4 codes")
# create two files A and B with OS level command and add variable A and variable B to them.
cat("file A content example \n", file = "A")
cat("file B content example \n", file = "B")
file.append("A", "B")
file.create("B") # trashing previously created B file
file.append("A", rep("B", 10))
file.copy("A", "C")
dir.create("tmppp")
file.copy(c("A", "B"), "tmppp")
list.files("tmp")
setwd("/Users/rawassizadeh/EVERYTHING/Work/TEACHING/CS 688 - Web Analytics and Mining/Module 4 codes")
# create two files A and B with OS level command and add variable A and variable B to them.
cat("file A content example \n", file = "A")
cat("file B content example \n", file = "B")
file.append("A", "B")
file.create("B") # trashing previously created B file
file.append("A", rep("B", 10))
file.copy("A", "C")
dir.create("tmppp")
file.copy(c("A", "B"), "tmppp")
list.files("tmp")
setwd("/Users/rawassizadeh/EVERYTHING/Work/TEACHING/CS688_WebAnalyticsMining/toGithub/Session 5")
le B to them.
cat("file A content example \n", file = "A")
cat("file B content example \n", file = "B")
file.append("A", "B")
file.create("B") # trashing previously created B file
file.append("A", rep("B", 10))
file.copy("A", "C")
dir.create("tmppp")
file.copy(c("A", "B"), "tmppp")
list.files("tmp")
library("RMySQL")
db_sql=dbConnect(MySQL(),user="root",
host="127.0.0.1",
dbname="met622",
password="root",
port=3306)
tableData <- dbGetQuery(db_sql, "SELECT * FROM pet")
tableData
library(mongolite)
m <- mongo("test", url = "mongodb://localhost:27017/test")
inventory_col = mongo(collection = "inventory", db = "test")
inventory_col$find('{}')
